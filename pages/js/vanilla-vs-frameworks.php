<main class="content-area" style="padding: 20px; max-width: 950px; margin: auto;">

  <!-- Breadcrumb -->
  <nav aria-label="breadcrumb" class="text-sm text-gray-600 mb-4">
    <ol class="list-none p-0 inline-flex">
      <li class="flex items-center">
        <a href="index.php" class="text-blue-600 hover:underline">Home</a>
        <span class="mx-2">/</span>
      </li>
      <li class="flex items-center">
        <a href="javascript.php?page=js/vanilla-vs-frameworks" class="text-blue-600 hover:underline">Vanilla vs Frameworks</a>
      </li>
    </ol>
  </nav>

  <h1 class="text-3xl font-bold mb-4">üÜö Vanilla JavaScript vs Frameworks</h1>

  <p class="mb-4">
    As you dive deeper into web development, you'll encounter terms like <strong>Vanilla JavaScript</strong> and popular frameworks such as <code>React</code>, <code>Vue</code>, and <code>Angular</code>. Let's compare them to help you understand when and why to choose one over the other.
  </p>

  <h2 class="text-2xl font-semibold mt-6 mb-2">üç¶ What is Vanilla JavaScript?</h2>
  <p class="mb-4">
    "Vanilla JS" refers to using plain JavaScript ‚Äî without any libraries or frameworks. It gives you direct control over the DOM, browser APIs, and your code structure.
  </p>

  <h3 class="text-lg font-semibold mt-4">‚úÖ Pros:</h3>
  <ul class="list-disc list-inside mb-4">
    <li>Lightweight ‚Äì no external dependencies</li>
    <li>Faster load times</li>
    <li>Better understanding of core JS fundamentals</li>
    <li>No build step or tooling required</li>
  </ul>

  <h3 class="text-lg font-semibold">‚ö†Ô∏è Cons:</h3>
  <ul class="list-disc list-inside mb-4">
    <li>More boilerplate code for complex apps</li>
    <li>No built-in components or reactive data binding</li>
    <li>Difficult to manage large-scale UI interactions</li>
  </ul>

  <h2 class="text-2xl font-semibold mt-6 mb-2">‚öôÔ∏è What Are Frameworks?</h2>
  <p class="mb-4">
    Frameworks like React, Vue, and Angular are tools that simplify building modern web apps. They provide components, state management, routing, and more ‚Äî reducing the amount of manual DOM manipulation you need to do.
  </p>

  <h3 class="text-lg font-semibold mt-4">‚úÖ Pros:</h3>
  <ul class="list-disc list-inside mb-4">
    <li>Faster development with reusable components</li>
    <li>Built-in routing and state management</li>
    <li>More maintainable code for large apps</li>
    <li>Active ecosystems and community support</li>
  </ul>

  <h3 class="text-lg font-semibold">‚ö†Ô∏è Cons:</h3>
  <ul class="list-disc list-inside mb-4">
    <li>Steeper learning curve</li>
    <li>Often requires a build step (Webpack, Vite, etc.)</li>
    <li>Larger bundle sizes</li>
    <li>Can become opinionated or complex</li>
  </ul>

  <h2 class="text-2xl font-semibold mt-6 mb-2">üß† When to Use Vanilla JS</h2>
  <ul class="list-disc list-inside mb-4">
    <li>Small projects or static websites</li>
    <li>Learning the fundamentals of JavaScript</li>
    <li>Performance-critical tasks (e.g., games, animations)</li>
    <li>No need for reactive UIs or client-side routing</li>
  </ul>

  <h2 class="text-2xl font-semibold mt-6 mb-2">üöÄ When to Use Frameworks</h2>
  <ul class="list-disc list-inside mb-4">
    <li>Medium to large-scale applications</li>
    <li>Projects requiring reusable UI components</li>
    <li>Apps with complex state, routing, or logic</li>
    <li>Team-based development and collaboration</li>
  </ul>

  <div class="bg-blue-100 border-l-4 border-blue-500 text-blue-900 p-4 rounded mt-6">
    üí° <strong>Pro Tip:</strong> Start with Vanilla JavaScript to master the core. Once you're confident, move to frameworks for better scalability and productivity.
  </div>

</main>
